// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
import "hardhat/console.sol";

contract VolcanoCoin{

    uint totalSupply = 10000;
    address owner;
    modifier onlyOwner {
        if (msg.sender == owner)
        _;
    }
    
    constructor () {
        owner = msg.sender;
        balances[owner] = totalSupply;
    }

    function getTotalSupply() public view returns (uint) {
        return totalSupply;
    }


    event reportTotalSupply(uint);
    
    function increaseTotalSupply() public onlyOwner {
        totalSupply += 1000;
        emit reportTotalSupply(totalSupply);
    }


    mapping (address => uint) public balances;

    function getBalance (address user) public view returns (uint) {
        return balances[user];
    }


event reportTransfer (uint, address);

   struct Payment {
        uint transferAmount;
        address transferRecipient;
    }

    mapping (address => Payment[]) public TransferLog;

    function transfer(uint amount, address recipient) public {
       require (amount < balances[msg.sender], "insufficient balance to transfer");
            balances[recipient] = amount;
            balances[msg.sender] -= amount;
            TransferLog[msg.sender].push(Payment(amount, recipient));
            emit reportTransfer (amount, recipient);
    }

 

    
    //console.log ("Total Supply", totalSupply);
}
